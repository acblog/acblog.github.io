{"Id":"fa42c1ef-a997-4bbd-89b9-8fa8ff0dc7bc","Type":0,"AuthorId":"","Content":{"Raw":"\n# AcBlog\n\n![CI](https://github.com/acblog/acblog/workflows/CI/badge.svg) ![CD](https://github.com/acblog/acblog/workflows/CD/badge.svg) [![Homepage](https://img.shields.io/github/workflow/status/acblog/acblog.github.io/Deploy/src?label=homepage)](https://github.com/acblog/acblog.github.io) ![Mirrors](https://img.shields.io/github/workflow/status/acblog/mirrors/Mirror/master?label=mirrors) ![License](https://img.shields.io/github/license/acblog/acblog.svg)\n\nAn open source extensible static \u0026 dynamic blog system.\n\n![](https://repository-images.githubusercontent.com/259549650/50d50d00-9073-11ea-8e72-0d3f1d3a7d8c)\n\nThe [homepage](https://acblog.github.io) is powered by AcBlog hosted on GitHub Pages.\n\n## Features\n\n- Based on WebAssembly\n- Single Page APP\n  - Installable\n  - Offline\n- Frontend\n  - WebAssembly: full static files\n  - SPA with server prerender\n- Backend\n  - Static-file backend with generator\n  - Dynamic server backend\n- Post\n  - Category \u0026 Keywords\n  - Markdown rendering\n  - LaTeX math rendering\n  - Password protection\n  - Table of contents\n- Slides\n  - Preview \u0026 Full page\n- Note\n- Docker deployment\n  - [![Docker](https://img.shields.io/docker/pulls/acblog/wasm.svg)](https://hub.docker.com/r/acblog/wasm) Client.WebAssembly\n  - [![Docker](https://img.shields.io/docker/pulls/acblog/wasm-host.svg)](https://hub.docker.com/r/acblog/wasm-host) Client.WebAssembly.Host\n  - [![Docker](https://img.shields.io/docker/pulls/acblog/api.svg)](https://hub.docker.com/r/acblog/api) Server.API\n\n## Guide\n\n### Frontend\n\nUse AcBlog\u0027s WebAssembly client docker image:\n\n\u0060\u0060\u0060sh\ndocker pull acblog/wasm:latest\ndocker run -d -p 8000:80 acblog/wasm:latest\n\u0060\u0060\u0060\n\nYou can use volumn to apply settings:\n\n\u0060\u0060\u0060sh\ndocker run -d \\\n  -v $PWD/appsettings.json:/app/appsettings.json \\\n  -v $PWD/manifest.json:/app/manifest.json \\\n  -p 8000:80 acblog/wasm:latest\n\u0060\u0060\u0060\n\nFor GitHub Pages hosting, you can use [wasm-ghpages-generate-action](https://github.com/acblog/wasm-ghpages-generate-action).\n\n---\n\nUse AcBlog\u0027s WebAssembly hosted client docker image:\n\n\u0060\u0060\u0060sh\ndocker pull acblog/wasm-host:latest\ndocker run -d -p 8000:80 acblog/wasm-host:latest\n\u0060\u0060\u0060\n\nYou can use volumn to apply settings:\n\n\u0060\u0060\u0060sh\ndocker run -d \\\n  -v $PWD/appsettings.json:/app/appsettings.json \\\n  -v $PWD/manifest.json:/app/wwwroot/manifest.json \\\n  -p 8000:80 acblog/wasm-host:latest\n\u0060\u0060\u0060\n\n### Backend\n\n#### Static\n\nUse AcBlog\u0027s static generator:\n\n\u0060\u0060\u0060sh\ndotnet tool install -g AcBlog.Tools.StaticGenerator --version 0.0.1 \\\n  --add-source https://www.myget.org/F/stardustdl/api/v3/index.json\n\nacblog-sgen -o ./dist\n\u0060\u0060\u0060\n\nFor GitHub Pages hosting, you can use [static-backend-generate-action](https://github.com/acblog/static-backend-generate-action).\n\n#### Dynamic\n\nUse AcBlog\u0027s API server docker image:\n\n\u0060\u0060\u0060sh\ndocker pull acblog/api:latest\ndocker run -d -p 8000:80 acblog/api:latest\n\u0060\u0060\u0060\n\n### Compose\n\nUse docker-compose to deploy WebAssembly hosted client and API server:\n\n\u0060\u0060\u0060sh\ncd docker/deploy\ndocker-compose up\n\u0060\u0060\u0060\n\nMaybe you need to restart api container after database initializing.\n\n### SDK\n\nUse AcBlog\u0027s command-line SDK tool to communicate with AcBlog server.\n\n\u0060\u0060\u0060sh\ndotnet tool install -g AcBlog.Tools.SDK --version 0.0.1 \\\n  --add-source https://www.myget.org/F/stardustdl/api/v3/index.json\n\nacblog --help\n\u0060\u0060\u0060\n\n## Build\n\n1. Install .NET Core SDK 3.1, NodeJS 12.x and npm.\n2. Install Gulp \u0026 Libman\n\n\u0060\u0060\u0060sh\nnpm install -g gulp\ndotnet tool install --global Microsoft.Web.LibraryManager.Cli\n\u0060\u0060\u0060\n\n3. Restore dependencies\n\n\u0060\u0060\u0060sh\npwsh -c tools.ps1 restore\n\u0060\u0060\u0060\n\n4. Build project\n\n\u0060\u0060\u0060sh\ndotnet build\n\u0060\u0060\u0060\n\n## Test \u0026 Benchmark\n\n\u0060\u0060\u0060sh\npwsh -c tools.ps1 test\n\npwsh -c tools.ps1 benchmark\n\u0060\u0060\u0060\n","WordCount":3648},"Title":"What\u0027s AcBlog","CategoryId":"","KeywordIds":["82a73825-02b4-4bfa-a099-14758169e3bf"],"CreationTime":"2020-06-01T10:40:09.308426+00:00","ModificationTime":"2020-06-01T10:40:09.308426+00:00"}